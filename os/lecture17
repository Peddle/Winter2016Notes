Dekker's Algorithm:
-use turn-taking to prioritize access to flags

bool intent[] = {false, true}; //one per task

task 0:
intent[0] = true;
while(intent[1]){
  if(turn!- 0){
    intent[0] = false;
    while(turn!=0){wait...}
    intent[0] = true;
  }
}

critical sections
turn = 1 //turn is a tie breaker during contention
intent[0] = false;

-generilizable but complicated: know # of tasks in advance
-busy wait in while loop

-solution: get help from hardware

  idea #1: use interrupts:
    -disable either when accessing flags or over CS
    -problems: can't be done directly in user mode
      -blocks all other tasks not just mutex ones
      -multiple cores have their own handlers

  idea #2: design special instructions
    -if order of comparison and setting instructions is the problem, make the whoel thing atomic.

Atomic MUtex Instructions

bool lock = false;
while(test_and_set(&lock)){wait...}
//cs
lock = false;

tas is implemented atomically asi

bool tas(bool *lock){
  bool was_locked = klock;
  if(!was_locked){
  *lock = true; //get the lock
  }
  return !was_locked;
}

-can use tas to implement a boolean lock
-would be handy to do more...

int shared_counter = 0;
do{
  int current = shared_counterl
} while(compare_and_swap(&shared_counter, current, current+1));

cas is implemented as (atomically):

bool cas(int &dest, int was, int should_be){
  if(*dest == was){
    *dest = should_be;
    return true;
  }
  return false;
}

cas(&head, old_head, new_node)