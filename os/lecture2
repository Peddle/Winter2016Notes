The features of an OS
	-executing and managing jobs
		-creating, scheduling, suspending, communicating
	-managing memory
		-allocating, monitoring usahe and ownership
	-managing storage (files and file system)
		-creating, organizing (naming & directory structure), manipulating
		(CRUD)
	-protection and security
		-limiting access, preventing attacks
	-handling & responding to errors

How an OS Works
	-the core functionality of the OS is contained in the kernel
		-anything in the kernel is "safe", everything else (user code) is unsafe
		-debate between monolithic kernel & micro kernel
			-more in kernel = efficient, less = greater isolation (safer)
	-the os is software but it relies on hardware for features
		-interrupt handling
			-eg. IBM PC IRQ1 on keyboard events, IRQ0 for timer
			-causes control to be passed to the kernel through entry points stored in a table
			-three classes of interrupts:
				IRQ (hardware interrupts)
				software generated by cpu (for system call)
				exceptions: for error handling (trap, fault)
			-kernel can notify users of events via signals
		-MMU (Memory Management Unit)
			-access memory (both physical & otherwise) through a virtual address space
			-also supports memory protection to restrict access to memory
				-attempts to access illegal area cause a fault
				-CPU stops & OS takes over to handle the interrupt
		I/O
			-in traditional programmed I/O
				cpu requests a small amount of data
				io device performs operation
				cpu polls until status changes
				receives data & copies to memory
			-in interrupt-driven I/O
				I/O device interrupts CPU when done
				CPU can do work while waiting
			-DMA (direct memory access):
				CPU sends I/O system a request: transfer details & memory source/destination
				IO subsystem copies to/from that location
				interrupts cpu when done